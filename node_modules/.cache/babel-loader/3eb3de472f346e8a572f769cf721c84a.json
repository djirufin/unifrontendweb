{"ast":null,"code":"import React, { createContext, forwardRef, useContext, useMemo, useRef, useState, useEffect, useId, useDeferredValue, useCallback } from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n/*\r\n * References:\r\n * [ARIA1.1#comboBox]: https://www.w3.org/TR/wai-aria-1.1/#combobox\r\n * [ARIA1.2#comboBox]: https://www.w3.org/TR/wai-aria-1.2/#combobox\r\n *\r\n * Low-level Components:\r\n * - ComboboxInput: The textbox input field\r\n * - Listbox: The container that holds the list of options\r\n * - ListboxOption: One listbox option\r\n * - Highlight: Highlighting of matching text of the listbox option\r\n *\r\n * High-level Components:\r\n * - Combobox: A container that you can pass all low-level components yourself (advanced use-cases)\r\n * - DatalistInput: A container that renders all low-level components for you (simple use-cases)\r\n */\n\n/*\r\n * \"Typically, the default state of a combobox is collapsed.\" [ARIA1.1#combobox]\r\n * If the developer does not manage the open state on its own, by default this component will collapse the listbox.\r\n * This ensures that the datalist input components (by default) matches the behavior of the native datalist element\r\n */\n\n\nvar DEFAULT_IS_EXPANDED = false;\nvar IS_PRODUCTION = process.env.NODE_ENV === 'production';\n/*\r\n * Utilities\r\n */\n\nvar contextRequiredWarning = function (name) {\n  return \"The \".concat(name, \" component must be a child of Combobox. Please wrap the component inside Combobox to ensure that the required context is available.\");\n};\n/**\r\n * This function is inspired by tiny-warning: https://github.com/alexreardon/tiny-warning\r\n */\n\n\nfunction assertWithWarning(condition, text) {\n  // wrapping in production check for better dead code elimination\n  if (!IS_PRODUCTION) {\n    if (condition) {\n      return;\n    } // check console for IE9 support which provides console\n\n\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    } // Throwing an error and catching it immediately\n    // to improve debugging\n    // A consumer can use 'pause on caught exceptions'\n    // https://github.com/facebook/react/issues/4216\n\n\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\nvar handleWith = function () {\n  var fns = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fns[_i] = arguments[_i];\n  }\n\n  return function (e) {\n    return fns.forEach(function (fn) {\n      return fn && fn(e);\n    });\n  };\n};\n\nvar ComboboxContext = createContext({\n  contextAvailable: true,\n  listboxId: '',\n  selectedItemId: '',\n  isExpanded: DEFAULT_IS_EXPANDED,\n  currentInputValue: ''\n});\n\nvar useComboboxContext = function () {\n  return useContext(ComboboxContext);\n};\n/**\r\n * Use this hook to control the open state and input value of the combobox.\r\n * Pass the properties down to the DataListInput component.\r\n */\n\n\nvar useComboboxControls = function (params) {\n  var _a = useStateRef(params === null || params === void 0 ? void 0 : params.isExpanded),\n      isExpanded = _a[0],\n      setIsExpanded = _a[1];\n\n  var _b = useState((params === null || params === void 0 ? void 0 : params.initialValue) || ''),\n      value = _b[0],\n      setValue = _b[1];\n\n  return {\n    isExpanded: isExpanded,\n    value: value,\n    setIsExpanded: setIsExpanded,\n    setValue: setValue\n  };\n};\n\nfunction useClassNameStr(className, params) {\n  return useMemo(function () {\n    return !className || typeof className === 'string' ? className : className(params);\n  }, [params, className]);\n}\n/**\r\n * The helpers returned by this hook can be used\r\n * to construct a custom Combobox behavior to your liking.\r\n * Wrap the low-level components in the Combobox component\r\n * and pass the helpers down if you need them.\r\n */\n\n\nfunction useComboboxHelpers(_a) {\n  var itemsRef = _a.itemsRef,\n      listboxRef = _a.listboxRef,\n      comboboxInputRef = _a.comboboxInputRef,\n      onSelect = _a.onSelect,\n      isExpandedRef = _a.isExpandedRef,\n      setIsExpanded = _a.setIsExpanded,\n      setValue = _a.setValue,\n      setSelectedItem = _a.setSelectedItem;\n  /**\r\n   * onChange callback for input field\r\n   */\n\n  var handleChange = useCallback(function (e) {\n    if (setValue) setValue(e.currentTarget.value);\n    if (setIsExpanded) setIsExpanded(true);\n  }, [setValue, setIsExpanded]);\n  /**\r\n   * onFocus callback for input field\r\n   */\n\n  var expandOnFocus = useCallback(function () {\n    if (!isExpandedRef.current && setIsExpanded) setIsExpanded(true);\n  }, [setIsExpanded]);\n  var handleCloseDatalist = useCallback(function () {\n    if (isExpandedRef.current && setIsExpanded) setIsExpanded(false);\n  }, [setIsExpanded]);\n  /**\r\n   * onKeyDown/onKeyUp callback for window\r\n   */\n\n  var closeOnEscape = useCallback(function (e) {\n    if (e.key === 'Escape') handleCloseDatalist();\n  }, []);\n  /**\r\n   * onClick callback for window\r\n   */\n\n  var handleClickOutside = useCallback(function (e) {\n    if (!comboboxInputRef.current || !listboxRef.current) return;\n    var targetElement = e.target;\n\n    if (!targetElement || !listboxRef.current.contains(targetElement) && targetElement !== comboboxInputRef.current) {\n      handleCloseDatalist();\n    }\n  }, [handleCloseDatalist]);\n  /**\r\n   * onFocus callback for window\r\n   */\n\n  var handleFocusOutside = useCallback(function () {\n    if (!comboboxInputRef.current || !listboxRef.current) return;\n    var activeElement = document.activeElement;\n\n    if (!activeElement || !listboxRef.current.contains(activeElement) && activeElement !== comboboxInputRef.current) {\n      handleCloseDatalist();\n    }\n  }, [handleCloseDatalist]);\n  /**\r\n   * Callback for item selection (enter/click)\r\n   */\n\n  var handleSelect = useCallback(function (item) {\n    // return focus to input field after selection\n    if (comboboxInputRef.current) comboboxInputRef.current.focus();\n    if (setValue) setValue(item.value);\n    if (setIsExpanded) setIsExpanded(false);\n    if (setSelectedItem) setSelectedItem(item);\n    if (onSelect) onSelect(item); // onSelect at last to allow override of previous state changes\n  }, [setValue, onSelect, setIsExpanded, setSelectedItem]);\n  /**\r\n   * keyDown callback for input field\r\n   */\n\n  var handleKeyDownOnInput = useCallback(function (e) {\n    // Control+Option+Space is used by VoiceOver on Mac to open the menu\n    var isControlOptionSpace = e.code === 'Space' && e.ctrlKey && e.altKey;\n    var shouldVisitItems = e.key === 'ArrowDown' || isControlOptionSpace;\n    if (!listboxRef.current || !shouldVisitItems) return;\n    if (isControlOptionSpace) e.preventDefault();\n\n    if (isExpandedRef.current) {\n      var firstOption = listboxRef.current.firstElementChild;\n      if (firstOption && typeof firstOption.focus === 'function') firstOption.focus();\n    } else if (setIsExpanded) {\n      setIsExpanded(true); // wait for next tick (render)\n\n      window.setTimeout(function () {\n        if (!listboxRef.current) return;\n        var firstOption = listboxRef.current.firstElementChild;\n        if (firstOption && typeof firstOption.focus === 'function') firstOption.focus();\n      });\n    }\n  }, [setIsExpanded]);\n  /**\r\n   * keyDown callback for list element (listbox option)\r\n   * Uses keyDown instead of keyUp to support \"long-press\" to quickly navigate through list\r\n   */\n\n  var handleKeyDownOnListboxOption = useCallback(function (e) {\n    if (!itemsRef.current) return;\n    var item = itemsRef.current.find(function (item) {\n      return item.id === e.currentTarget.id;\n    });\n    if (!item) return;\n    if (e.key === 'Enter') return handleSelect(item); // Enter should act as Click. This will also submit a one input form correctly with the latest value.\n\n    if (!listboxRef.current || e.key === 'Escape' || e.key === 'Tab' || e.key === 'Shift') return; // Do nothing on meta keys\n    // Used for navigation\n\n    if (e.key === 'ArrowDown' || e.key === 'ArrowUp' || e.key === 'Alt') {\n      e.preventDefault(); // prevent safari from doing crazy text selection things\n\n      var nextNode = null;\n\n      if (e.key === 'ArrowDown' || e.key === 'Alt') {\n        nextNode = e.currentTarget.nextElementSibling || listboxRef.current.firstElementChild;\n      } else {\n        nextNode = e.currentTarget.previousElementSibling || listboxRef.current.lastElementChild;\n      }\n\n      if (!nextNode) return;\n      var nextOption = nextNode;\n      if (nextOption && typeof nextOption.focus === 'function') nextOption.focus();\n      return;\n    } // Anything else should go to the input field\n\n\n    if (!comboboxInputRef.current) return;\n    comboboxInputRef.current.focus();\n    comboboxInputRef.current.dispatchEvent(new KeyboardEvent('keydown', {\n      key: e.key\n    }));\n  }, [handleSelect]);\n  return {\n    closeOnEscape: closeOnEscape,\n    handleClickOutside: handleClickOutside,\n    handleFocusOutside: handleFocusOutside,\n    handleChange: handleChange,\n    expandOnFocus: expandOnFocus,\n    handleSelect: handleSelect,\n    handleKeyDownOnInput: handleKeyDownOnInput,\n    handleKeyDownOnListboxOption: handleKeyDownOnListboxOption\n  };\n}\n/**\r\n * The textbox input field.\r\n * Does currently not implement aria-activedescendant which is not obligatory for datalist input components.\r\n * Autocomplete off to prevent browser autocomplete from interfering with our own; can be overridden with props.\r\n */\n\n\nvar ComboboxInput = forwardRef(function (_a, forwardedRef) {\n  var value = _a.value,\n      props = __rest(_a, [\"value\"]);\n\n  var _b = useComboboxContext(),\n      contextAvailable = _b.contextAvailable,\n      listboxId = _b.listboxId,\n      isExpanded = _b.isExpanded;\n\n  assertWithWarning(contextAvailable, contextRequiredWarning(ComboboxInput.name));\n  return React.createElement(\"input\", __assign({\n    autoComplete: \"off\"\n  }, props, {\n    ref: forwardedRef,\n    value: value,\n    type: \"text\",\n    role: \"combobox\",\n    \"aria-autocomplete\": \"list\",\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": isExpanded,\n    \"aria-controls\": listboxId\n  }));\n});\nComboboxInput.displayName = 'ComboboxInput';\n/**\r\n * Optional highlight component for the listbox option text.\r\n * Should be wrapped by ListboxOption. Provide ListBoxOption an aria-label to ensure accessibility, especially if using mark.\r\n */\n\nvar Highlight = function (_a) {\n  var children = _a.children,\n      _b = _a.currentInput,\n      currentInput = _b === void 0 ? '' : _b,\n      _c = _a.as,\n      as = _c === void 0 ? 'mark' : _c,\n      props = __rest(_a, [\"children\", \"currentInput\", \"as\"]);\n\n  var markedChildren = useMemo(function () {\n    if (typeof children !== 'string') {\n      return children;\n    }\n\n    var index = children.toLowerCase().indexOf(currentInput.toLowerCase());\n    var inputLength = currentInput.length;\n\n    if (index === -1 || !inputLength) {\n      return children;\n    }\n\n    return React.createElement(React.Fragment, null, children.substring(0, index), as === 'mark' ? React.createElement(\"mark\", __assign({}, props), children.substring(index, index + inputLength)) : React.createElement(\"span\", __assign({}, props), children.substring(index, index + inputLength)), children.substring(index + inputLength, children.length));\n  }, [currentInput, children]);\n  return React.createElement(React.Fragment, null, markedChildren);\n};\n/**\r\n * One listbox option.\r\n */\n\n\nvar ListboxOption = forwardRef(function (_a, forwardedRef) {\n  var children = _a.children,\n      id = _a.id,\n      className = _a.className,\n      props = __rest(_a, [\"children\", \"id\", \"className\"]);\n\n  var selectedItemId = useComboboxContext().selectedItemId;\n  var classNameStr = useClassNameStr(className, {\n    isSelected: !!id && id === selectedItemId\n  });\n  return React.createElement(\"li\", __assign({}, props, {\n    ref: forwardedRef,\n    id: id,\n    className: classNameStr,\n    role: \"option\"\n  }), children);\n});\nListboxOption.displayName = 'ListboxOption';\n/**\r\n * The combobox popup list.\r\n */\n\nvar Listbox = forwardRef(function (_a, forwardedRef) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  var _b = useComboboxContext(),\n      contextAvailable = _b.contextAvailable,\n      listboxId = _b.listboxId,\n      isExpanded = _b.isExpanded;\n\n  assertWithWarning(contextAvailable, contextRequiredWarning(Listbox.name));\n  var isExpandedRef = useRef(isExpanded);\n\n  var _c = useState(false),\n      hasExpanded = _c[0],\n      setHasExpanded = _c[1];\n\n  useEffect(function () {\n    if (!isExpanded) {\n      setHasExpanded(false);\n    } else if (isExpanded && isExpanded !== isExpandedRef.current) {\n      setHasExpanded(true);\n    }\n\n    isExpandedRef.current = isExpanded; // drag pointer to the old value\n  }, [isExpanded]); // TODO https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live instead of title\n\n  return React.createElement(\"ul\", __assign({}, props, {\n    ref: forwardedRef,\n    id: listboxId,\n    role: \"listbox\",\n    \"aria-live\": hasExpanded ? props['aria-live'] || 'polite' : 'off'\n  }), children);\n});\nListbox.displayName = 'Listbox';\n/**\r\n * A container that you can pass all low-level components yourself for advanced use-cases.\r\n * The Combobox provides the context for the combobox low-level components.\r\n */\n\nvar Combobox = function (_a) {\n  var currentInputValue = _a.currentInputValue,\n      listboxId = _a.listboxId,\n      selectedItemId = _a.selectedItemId,\n      _b = _a.isExpanded,\n      isExpanded = _b === void 0 ? true : _b,\n      children = _a.children;\n  var id = useId();\n  return React.createElement(ComboboxContext.Provider, {\n    value: {\n      currentInputValue: currentInputValue,\n      contextAvailable: true,\n      listboxId: listboxId || id,\n      selectedItemId: selectedItemId,\n      isExpanded: isExpanded\n    }\n  }, children);\n};\n\nCombobox.ComboboxInput = ComboboxInput;\nCombobox.Listbox = Listbox;\nCombobox.ListboxOption = ListboxOption;\nCombobox.Highlight = Highlight;\n/*\r\n * DatalistInput - high-level component & its utilities\r\n */\n\n/**\r\n * Internal hook used to create a ref for a state value to allow access to the state value without triggering a re-render.\r\n */\n\nfunction useStateRef(initialState) {\n  var _a = useState(initialState),\n      state = _a[0],\n      setState = _a[1];\n\n  var ref = useRef(initialState);\n\n  var setStateRef = function (newState) {\n    setState(newState);\n    ref.current = newState;\n  };\n\n  return [state, setStateRef, ref];\n}\n/**\r\n * Internal hook used to manipulate the value of the input field.\r\n */\n\n\nvar useInternalValue = function (value, setValue) {\n  var _a = useState(value || ''),\n      internalValue = _a[0],\n      setInternalValue = _a[1];\n\n  var setValues = useCallback(function (newValue) {\n    if (setValue) {\n      setValue(newValue);\n    } else {\n      setInternalValue(newValue);\n    }\n  }, [setValue]);\n  useEffect(function () {\n    setInternalValue(value || '');\n  }, [value]);\n  return [internalValue, setValues];\n};\n/**\r\n * Internal hook to keep track of the selected item.\r\n */\n\n\nfunction useInternalSelectedItem(item) {\n  var _a = useState(item),\n      selectedItem = _a[0],\n      setSelectedItem = _a[1];\n\n  useEffect(function () {\n    setSelectedItem(item);\n  }, [item]);\n  return [selectedItem, setSelectedItem];\n}\n/**\r\n * Alternative function for matching the current input value (needle) and the values of the items array.\r\n * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).\r\n */\n\n\nvar startsWithValueFilter = function (items, value) {\n  if (value === void 0) {\n    value = '';\n  }\n\n  return items.filter(function (item) {\n    return typeof item.value === 'string' ? item.value.substring(0, value.length).toLowerCase() === value.toLowerCase() : true;\n  });\n};\n/**\r\n * Default function for matching the current input value (needle) and the values of the items array.\r\n * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).\r\n */\n\n\nvar includesValueFilter = function (items, value) {\n  if (value === void 0) {\n    value = '';\n  }\n\n  return items.filter(function (item) {\n    return typeof item.value === 'string' ? item.value.toLowerCase().includes(value.toLocaleLowerCase()) : true;\n  });\n};\n\nfunction useFilters(items, value, filters) {\n  var filteredRef = useRef(items);\n  var filtered = useMemo(function () {\n    return filters.reduce(function (currentItems, filter) {\n      return filter(currentItems, value);\n    }, items);\n  }, [items, filters, value]);\n  useEffect(function () {\n    filteredRef.current = filtered;\n  }, [filtered]);\n  return [filtered, filteredRef];\n}\n/**\r\n * DatalistInput implements all lower-level components for you and provides a simple API for controlling the combobox.\r\n * Note: Use the useComboboxControls hook to control the value and expanded state of the combobox.\r\n * DatalistInput implements the ARIA1.2#comboBox specification, including keyboard navigation with ArrowUp and ArrowDown.\r\n * DatalistInput does currently not implement aria-activedescendant but shifts the focus to the listbox options on ArrowUp and ArrowDown.\r\n * Note: tabIndex of all listbox options is set to -1 to allow the user to use tab or shift tab to jump out of the datalist without the need to tab through all options.\r\n */\n\n\nvar DatalistInput = forwardRef(function (_a, forwardedRef) {\n  var label = _a.label,\n      _b = _a.showLabel,\n      showLabel = _b === void 0 ? true : _b,\n      items = _a.items,\n      selectedItem = _a.selectedItem,\n      value = _a.value,\n      setValue = _a.setValue,\n      onSelect = _a.onSelect,\n      placeholder = _a.placeholder,\n      _c = _a.isExpanded,\n      isExpanded = _c === void 0 ? DEFAULT_IS_EXPANDED : _c,\n      setIsExpanded = _a.setIsExpanded,\n      _d = _a.filters,\n      filters = _d === void 0 ? [includesValueFilter] : _d,\n      inputProps = _a.inputProps,\n      labelProps = _a.labelProps,\n      listboxOptionProps = _a.listboxOptionProps,\n      listboxProps = _a.listboxProps,\n      highlightProps = _a.highlightProps,\n      _e = _a.isExpandedClassName,\n      isExpandedClassName = _e === void 0 ? '' : _e,\n      _f = _a.isCollapsedClassName,\n      isCollapsedClassName = _f === void 0 ? '' : _f,\n      isExpandedStyle = _a.isExpandedStyle,\n      isCollapsedStyle = _a.isCollapsedStyle,\n      props = __rest(_a, [\"label\", \"showLabel\", \"items\", \"selectedItem\", \"value\", \"setValue\", \"onSelect\", \"placeholder\", \"isExpanded\", \"setIsExpanded\", \"filters\", \"inputProps\", \"labelProps\", \"listboxOptionProps\", \"listboxProps\", \"highlightProps\", \"isExpandedClassName\", \"isCollapsedClassName\", \"isExpandedStyle\", \"isCollapsedStyle\"]);\n\n  var _g = useStateRef(isExpanded),\n      internalIsExpanded = _g[0],\n      setInternalIsExpanded = _g[1],\n      isExpandedRef = _g[2];\n\n  var _h = useInternalValue(value, setValue),\n      internalValue = _h[0],\n      setInternalValue = _h[1];\n\n  var internalTextboxId = useId();\n  var debounceValue = useDeferredValue(internalValue);\n\n  var _j = useFilters(items, debounceValue, filters),\n      filteredItems = _j[0],\n      filteredItemsRef = _j[1];\n\n  var listboxRef = useRef(null);\n  var comboboxInputRef = useRef(null);\n\n  var _k = useInternalSelectedItem(selectedItem),\n      internalSelectedItem = _k[0],\n      setSelectedItem = _k[1];\n\n  var setIsExpandedStates = useCallback(function (state) {\n    return setIsExpanded ? setIsExpanded(state) : setInternalIsExpanded(state);\n  }, [setIsExpanded]);\n\n  var _l = useComboboxHelpers({\n    listboxRef: listboxRef,\n    comboboxInputRef: comboboxInputRef,\n    isExpandedRef: isExpandedRef,\n    setValue: setInternalValue,\n    onSelect: onSelect,\n    itemsRef: filteredItemsRef,\n    setIsExpanded: setIsExpandedStates,\n    setSelectedItem: setSelectedItem\n  }),\n      handleClickOutside = _l.handleClickOutside,\n      handleFocusOutside = _l.handleFocusOutside,\n      closeOnEscape = _l.closeOnEscape,\n      handleChange = _l.handleChange,\n      expandOnFocus = _l.expandOnFocus,\n      handleSelect = _l.handleSelect,\n      handleKeyDownOnInput = _l.handleKeyDownOnInput,\n      handleKeyDownOnListboxOption = _l.handleKeyDownOnListboxOption;\n\n  useEffect(function () {\n    setInternalIsExpanded(isExpanded);\n  }, [isExpanded]);\n  useEffect(function () {\n    // separate useEffect so we don't re-run it twice with each dependency change\n    window.addEventListener('click', handleClickOutside);\n    window.addEventListener('keyup', closeOnEscape);\n    return function () {\n      window.removeEventListener('click', handleClickOutside);\n      window.removeEventListener('keyup', closeOnEscape);\n    };\n  }, [handleClickOutside]);\n  useEffect(function () {\n    // separate useEffect so we don't re-run it twice with each dependency change\n    window.addEventListener('focusin', handleFocusOutside);\n    return function () {\n      window.removeEventListener('focusin', handleFocusOutside);\n    };\n  }, [handleFocusOutside]);\n  return React.createElement(\"div\", __assign({}, props, {\n    ref: forwardedRef,\n    className: \"react-datalist-input__container \".concat(props.className)\n  }), React.createElement(Combobox, {\n    listboxId: listboxProps === null || listboxProps === void 0 ? void 0 : listboxProps.id,\n    selectedItemId: internalSelectedItem === null || internalSelectedItem === void 0 ? void 0 : internalSelectedItem.id,\n    isExpanded: internalIsExpanded,\n    currentInputValue: internalValue\n  }, showLabel && React.createElement(\"label\", __assign({}, labelProps, {\n    className: \"react-datalist-input__label \".concat(labelProps === null || labelProps === void 0 ? void 0 : labelProps.className),\n    htmlFor: (inputProps === null || inputProps === void 0 ? void 0 : inputProps.id) || internalTextboxId\n  }), label), React.createElement(ComboboxInput, __assign({}, inputProps, {\n    ref: comboboxInputRef,\n    id: (inputProps === null || inputProps === void 0 ? void 0 : inputProps.id) || internalTextboxId,\n    placeholder: placeholder,\n    value: internalValue,\n    onClick: handleWith(expandOnFocus, inputProps === null || inputProps === void 0 ? void 0 : inputProps.onClick),\n    onFocus: handleWith(expandOnFocus, inputProps === null || inputProps === void 0 ? void 0 : inputProps.onFocus),\n    onChange: handleWith(handleChange, inputProps === null || inputProps === void 0 ? void 0 : inputProps.onChange),\n    onKeyDown: handleWith(handleKeyDownOnInput, inputProps === null || inputProps === void 0 ? void 0 : inputProps.onKeyDown),\n    \"aria-label\": !showLabel && typeof label === 'string' ? label : undefined,\n    className: \"react-datalist-input__textbox \".concat(inputProps === null || inputProps === void 0 ? void 0 : inputProps.className)\n  })), (filteredItems.length && internalIsExpanded || isCollapsedClassName || isCollapsedStyle) && React.createElement(Listbox, __assign({}, listboxProps, {\n    ref: listboxRef,\n    \"aria-hidden\": internalIsExpanded,\n    className: \"react-datalist-input__listbox \".concat(internalIsExpanded ? isExpandedClassName : isCollapsedClassName, \" \").concat((listboxProps === null || listboxProps === void 0 ? void 0 : listboxProps.className) || ''),\n    style: __assign(__assign({}, internalIsExpanded ? isExpandedStyle : isCollapsedStyle), listboxProps === null || listboxProps === void 0 ? void 0 : listboxProps.style)\n  }), filteredItems.map(function (item) {\n    return React.createElement(ListboxOption, __assign({}, listboxOptionProps, {\n      \"aria-label\": item.label || item.value,\n      key: item.id,\n      id: item.id,\n      tabIndex: -1,\n      onClick: handleWith(function () {\n        return handleSelect(item);\n      }, listboxOptionProps === null || listboxOptionProps === void 0 ? void 0 : listboxOptionProps.onClick),\n      onKeyDown: handleWith(handleKeyDownOnListboxOption, listboxOptionProps === null || listboxOptionProps === void 0 ? void 0 : listboxOptionProps.onKeyDown),\n      className: \"react-datalist-input__listbox-option \".concat(listboxOptionProps === null || listboxOptionProps === void 0 ? void 0 : listboxOptionProps.className)\n    }), React.createElement(Highlight, __assign({}, highlightProps, {\n      currentInput: internalValue\n    }), item.node || item.value));\n  }))));\n});\nDatalistInput.displayName = 'DatalistInput';\nexport { Combobox, DatalistInput, DatalistInput as default, includesValueFilter, startsWithValueFilter, useComboboxContext, useComboboxControls, useComboboxHelpers, useFilters };","map":{"version":3,"mappings":"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","names":["DEFAULT_IS_EXPANDED","IS_PRODUCTION","process","env","NODE_ENV","contextRequiredWarning","name","assertWithWarning","condition","text","console","warn","Error","x","handleWith","fns","_i","arguments","e","forEach","fn","ComboboxContext","createContext","contextAvailable","listboxId","selectedItemId","isExpanded","currentInputValue","params","useStateRef","setIsExpanded","useState","initialValue","value","setValue","useClassNameStr","className","useMemo","useComboboxHelpers","_a","itemsRef","listboxRef","comboboxInputRef","onSelect","isExpandedRef","setSelectedItem","handleChange","useCallback","currentTarget","expandOnFocus","current","handleCloseDatalist","closeOnEscape","key","handleClickOutside","targetElement","target","contains","handleFocusOutside","activeElement","document","handleSelect","item","focus","handleKeyDownOnInput","isControlOptionSpace","code","ctrlKey","altKey","shouldVisitItems","preventDefault","firstOption","firstElementChild","window","setTimeout","handleKeyDownOnListboxOption","find","id","nextNode","nextElementSibling","previousElementSibling","lastElementChild","nextOption","dispatchEvent","KeyboardEvent","ComboboxInput","forwardRef","forwardedRef","props","React","autoComplete","ref","type","role","displayName","Highlight","_b","currentInput","_c","as","markedChildren","children","index","toLowerCase","indexOf","inputLength","length","substring","__assign","ListboxOption","__rest","useComboboxContext","classNameStr","isSelected","Listbox","useRef","hasExpanded","setHasExpanded","useEffect","useId","Provider","Combobox","initialState","state","setState","setStateRef","newState","useInternalValue","internalValue","setInternalValue","setValues","newValue","useInternalSelectedItem","selectedItem","startsWithValueFilter","items","filter","includesValueFilter","includes","toLocaleLowerCase","useFilters","filters","filteredRef","filtered","reduce","currentItems","DatalistInput","showLabel","placeholder","_d","inputProps","labelProps","listboxOptionProps","listboxProps","highlightProps","_e","isExpandedClassName","_f","isCollapsedClassName","isExpandedStyle","isCollapsedStyle","internalIsExpanded","setInternalIsExpanded","internalTextboxId","debounceValue","useDeferredValue","filteredItems","filteredItemsRef","internalSelectedItem","setIsExpandedStates","addEventListener","removeEventListener","concat","htmlFor","label","onClick","onFocus","onChange","onKeyDown","undefined","style","map","tabIndex","node"],"sources":["C:\\Users\\pc\\git\\unifrontendweb\\node_modules\\react-datalist-input\\src\\index.tsx"],"sourcesContent":["import type {\n  PropsWithChildren,\n  PropsWithRef,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  ReactNode,\n  CSSProperties,\n  RefObject,\n  MutableRefObject,\n  SetStateAction,\n  Dispatch,\n} from 'react';\nimport React, {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useDeferredValue,\n  useId,\n} from 'react';\n\n/*\n * References:\n * [ARIA1.1#comboBox]: https://www.w3.org/TR/wai-aria-1.1/#combobox\n * [ARIA1.2#comboBox]: https://www.w3.org/TR/wai-aria-1.2/#combobox\n *\n * Low-level Components:\n * - ComboboxInput: The textbox input field\n * - Listbox: The container that holds the list of options\n * - ListboxOption: One listbox option\n * - Highlight: Highlighting of matching text of the listbox option\n *\n * High-level Components:\n * - Combobox: A container that you can pass all low-level components yourself (advanced use-cases)\n * - DatalistInput: A container that renders all low-level components for you (simple use-cases)\n */\n\n/*\n * \"Typically, the default state of a combobox is collapsed.\" [ARIA1.1#combobox]\n * If the developer does not manage the open state on its own, by default this component will collapse the listbox.\n * This ensures that the datalist input components (by default) matches the behavior of the native datalist element\n */\nconst DEFAULT_IS_EXPANDED = false;\n\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production';\n\n/*\n * Utilities\n */\n\nconst contextRequiredWarning = (name: string) =>\n  `The ${name} component must be a child of Combobox. Please wrap the component inside Combobox to ensure that the required context is available.`;\n\n/**\n * This function is inspired by tiny-warning: https://github.com/alexreardon/tiny-warning\n */\nfunction assertWithWarning(condition: boolean, text: string): void {\n  // wrapping in production check for better dead code elimination\n  if (!IS_PRODUCTION) {\n    if (condition) {\n      return;\n    }\n\n    // check console for IE9 support which provides console\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    // Throwing an error and catching it immediately\n    // to improve debugging\n    // A consumer can use 'pause on caught exceptions'\n    // https://github.com/facebook/react/issues/4216\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\n/**\n * Composes different event handlers into a single event handler.\n */\ntype HandleWith = <Event>(...fns: Array<((e: Event) => void) | undefined>) => (e: Event) => void;\nconst handleWith: HandleWith =\n  (...fns) =>\n  (e) =>\n    fns.forEach((fn) => fn && fn(e));\n\n/*\n * Hooks and context\n */\n\ntype ComboboxContext = {\n  contextAvailable: boolean; // Flag that context is available\n  listboxId?: string; // The element that describes the option list of the element. [ARIA1.1#combobox]\n  selectedItemId?: string; // The element that describes the selected option of the combobox.\n  isExpanded?: boolean;\n  currentInputValue?: string;\n};\n\nconst ComboboxContext = createContext<ComboboxContext>({\n  contextAvailable: true,\n  listboxId: '',\n  selectedItemId: '',\n  isExpanded: DEFAULT_IS_EXPANDED,\n  currentInputValue: '',\n});\n\nconst useComboboxContext = () => useContext(ComboboxContext);\n\n/**\n * Use this hook to control the open state and input value of the combobox.\n * Pass the properties down to the DataListInput component.\n */\nconst useComboboxControls = (params?: { isExpanded: boolean; initialValue?: string }) => {\n  const [isExpanded, setIsExpanded] = useStateRef(params?.isExpanded);\n  const [value, setValue] = useState(params?.initialValue || '');\n  return {\n    isExpanded,\n    value,\n    setIsExpanded,\n    setValue,\n  };\n};\n\n/**\n * An elegant way to style elements based on the current state of the component.\n * Inspired by react-router: https://v5.reactrouter.com/web/api/NavLink/classname-string-func\n */\ntype ClassNameFunction<Params> = (params: Params) => string;\ntype ClassName<Params> = HTMLAttributes<HTMLLIElement>['className'] | ClassNameFunction<Params>;\nfunction useClassNameStr<Params>(className: ClassName<Params>, params: Params) {\n  return useMemo(\n    () => (!className || typeof className === 'string' ? className : className(params)),\n    [params, className],\n  );\n}\n\ntype UseComboboxHelpersConfigParams = {\n  itemsRef: MutableRefObject<Item[]>;\n  listboxRef: RefObject<HTMLElement>;\n  comboboxInputRef: RefObject<HTMLInputElement>;\n  isExpandedRef: React.MutableRefObject<boolean>;\n  onSelect?: (item: Item) => void;\n  setIsExpanded?: (isExpanded: boolean) => void;\n  setValue?: (value: string) => void;\n  setSelectedItem?: (item: Item) => void;\n};\n\n/**\n * The helpers returned by this hook can be used\n * to construct a custom Combobox behavior to your liking.\n * Wrap the low-level components in the Combobox component\n * and pass the helpers down if you need them.\n */\nfunction useComboboxHelpers({\n  itemsRef,\n  listboxRef,\n  comboboxInputRef,\n  onSelect,\n  isExpandedRef,\n  setIsExpanded,\n  setValue,\n  setSelectedItem,\n}: UseComboboxHelpersConfigParams) {\n  /**\n   * onChange callback for input field\n   */\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (setValue) setValue(e.currentTarget.value);\n      if (setIsExpanded) setIsExpanded(true);\n    },\n    [setValue, setIsExpanded],\n  );\n\n  /**\n   * onFocus callback for input field\n   */\n  const expandOnFocus = useCallback(() => {\n    if (!isExpandedRef.current && setIsExpanded) setIsExpanded(true);\n  }, [setIsExpanded]);\n\n  const handleCloseDatalist = useCallback(() => {\n    if (isExpandedRef.current && setIsExpanded) setIsExpanded(false);\n  }, [setIsExpanded]);\n\n  /**\n   * onKeyDown/onKeyUp callback for window\n   */\n  const closeOnEscape = useCallback((e: KeyboardEvent) => {\n    if (e.key === 'Escape') handleCloseDatalist();\n  }, []);\n\n  /**\n   * onClick callback for window\n   */\n  const handleClickOutside = useCallback(\n    (e: MouseEvent) => {\n      if (!comboboxInputRef.current || !listboxRef.current) return;\n      const targetElement = e.target;\n      if (\n        !targetElement ||\n        (!listboxRef.current.contains(targetElement as HTMLElement) && targetElement !== comboboxInputRef.current)\n      ) {\n        handleCloseDatalist();\n      }\n    },\n    [handleCloseDatalist],\n  );\n\n  /**\n   * onFocus callback for window\n   */\n  const handleFocusOutside = useCallback(() => {\n    if (!comboboxInputRef.current || !listboxRef.current) return;\n    const activeElement = document.activeElement;\n    if (!activeElement || (!listboxRef.current.contains(activeElement) && activeElement !== comboboxInputRef.current)) {\n      handleCloseDatalist();\n    }\n  }, [handleCloseDatalist]);\n\n  /**\n   * Callback for item selection (enter/click)\n   */\n  const handleSelect = useCallback(\n    (item: Item) => {\n      // return focus to input field after selection\n      if (comboboxInputRef.current) comboboxInputRef.current.focus();\n      if (setValue) setValue(item.value);\n      if (setIsExpanded) setIsExpanded(false);\n      if (setSelectedItem) setSelectedItem(item);\n      if (onSelect) onSelect(item); // onSelect at last to allow override of previous state changes\n    },\n    [setValue, onSelect, setIsExpanded, setSelectedItem],\n  );\n\n  /**\n   * keyDown callback for input field\n   */\n  const handleKeyDownOnInput = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      // Control+Option+Space is used by VoiceOver on Mac to open the menu\n      const isControlOptionSpace = e.code === 'Space' && e.ctrlKey && e.altKey;\n      const shouldVisitItems = e.key === 'ArrowDown' || isControlOptionSpace;\n      if (!listboxRef.current || !shouldVisitItems) return;\n      if (isControlOptionSpace) e.preventDefault();\n      if (isExpandedRef.current) {\n        const firstOption = listboxRef.current.firstElementChild as HTMLLIElement | null;\n        if (firstOption && typeof firstOption.focus === 'function') firstOption.focus();\n      } else if (setIsExpanded) {\n        setIsExpanded(true);\n        // wait for next tick (render)\n        window.setTimeout(() => {\n          if (!listboxRef.current) return;\n          const firstOption = listboxRef.current.firstElementChild as HTMLLIElement | null;\n          if (firstOption && typeof firstOption.focus === 'function') firstOption.focus();\n        });\n      }\n    },\n    [setIsExpanded],\n  );\n\n  /**\n   * keyDown callback for list element (listbox option)\n   * Uses keyDown instead of keyUp to support \"long-press\" to quickly navigate through list\n   */\n  const handleKeyDownOnListboxOption = useCallback(\n    (e: React.KeyboardEvent<HTMLLIElement>) => {\n      if (!itemsRef.current) return;\n      const item = itemsRef.current.find((item) => item.id === e.currentTarget.id);\n      if (!item) return;\n      if (e.key === 'Enter') return handleSelect(item); // Enter should act as Click. This will also submit a one input form correctly with the latest value.\n      if (!listboxRef.current || e.key === 'Escape' || e.key === 'Tab' || e.key === 'Shift') return; // Do nothing on meta keys\n\n      // Used for navigation\n      if (e.key === 'ArrowDown' || e.key === 'ArrowUp' || e.key === 'Alt') {\n        e.preventDefault(); // prevent safari from doing crazy text selection things\n        let nextNode: Element | null = null;\n        if (e.key === 'ArrowDown' || e.key === 'Alt') {\n          nextNode = e.currentTarget.nextElementSibling || listboxRef.current.firstElementChild;\n        } else {\n          nextNode = e.currentTarget.previousElementSibling || listboxRef.current.lastElementChild;\n        }\n\n        if (!nextNode) return;\n        const nextOption = nextNode as HTMLLIElement;\n        if (nextOption && typeof nextOption.focus === 'function') nextOption.focus();\n        return;\n      }\n\n      // Anything else should go to the input field\n      if (!comboboxInputRef.current) return;\n      comboboxInputRef.current.focus();\n      comboboxInputRef.current.dispatchEvent(new KeyboardEvent('keydown', { key: e.key }));\n    },\n    [handleSelect],\n  );\n\n  return {\n    closeOnEscape,\n    handleClickOutside,\n    handleFocusOutside,\n    handleChange,\n    expandOnFocus,\n    handleSelect,\n    handleKeyDownOnInput,\n    handleKeyDownOnListboxOption,\n  };\n}\n\n/*\n * Low-level components\n */\n\ntype ComboboxInputProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'value'> & {\n  value?: string;\n};\n\n/**\n * The textbox input field.\n * Does currently not implement aria-activedescendant which is not obligatory for datalist input components.\n * Autocomplete off to prevent browser autocomplete from interfering with our own; can be overridden with props.\n */\nconst ComboboxInput = forwardRef<HTMLInputElement, PropsWithRef<ComboboxInputProps>>(\n  ({ value, ...props }, forwardedRef) => {\n    const { contextAvailable, listboxId, isExpanded } = useComboboxContext();\n    assertWithWarning(contextAvailable, contextRequiredWarning(ComboboxInput.name));\n\n    return (\n      <input\n        autoComplete=\"off\"\n        {...props}\n        ref={forwardedRef}\n        value={value}\n        type=\"text\"\n        role=\"combobox\"\n        aria-autocomplete=\"list\"\n        aria-haspopup=\"listbox\"\n        aria-expanded={isExpanded}\n        aria-controls={listboxId}\n      />\n    );\n  },\n);\nComboboxInput.displayName = 'ComboboxInput';\n\ntype HighlightProps = HTMLAttributes<HTMLElement> & {\n  currentInput?: string;\n  as?: 'mark' | 'span';\n};\n\n/**\n * Optional highlight component for the listbox option text.\n * Should be wrapped by ListboxOption. Provide ListBoxOption an aria-label to ensure accessibility, especially if using mark.\n */\nconst Highlight: React.FC<PropsWithChildren<HighlightProps>> = ({\n  children,\n  currentInput = '',\n  as = 'mark',\n  ...props\n}) => {\n  const markedChildren = useMemo(() => {\n    if (typeof children !== 'string') {\n      return children;\n    }\n    const index = children.toLowerCase().indexOf(currentInput.toLowerCase());\n    const inputLength = currentInput.length;\n    if (index === -1 || !inputLength) {\n      return children;\n    }\n    return (\n      <>\n        {children.substring(0, index)}\n        {as === 'mark' ? (\n          <mark {...props}>{children.substring(index, index + inputLength)}</mark>\n        ) : (\n          <span {...props}>{children.substring(index, index + inputLength)}</span>\n        )}\n        {children.substring(index + inputLength, children.length)}\n      </>\n    );\n  }, [currentInput, children]);\n\n  return <>{markedChildren}</>;\n};\n\ntype ListboxOptionClassNameParams = { isSelected: boolean };\ntype ListboxOptionProps = Omit<HTMLAttributes<HTMLLIElement>, 'className'> & {\n  className?: ClassName<ListboxOptionClassNameParams>;\n};\n\n/**\n * One listbox option.\n */\nconst ListboxOption = forwardRef<HTMLLIElement, PropsWithRef<ListboxOptionProps>>(\n  ({ children, id, className, ...props }, forwardedRef) => {\n    const { selectedItemId } = useComboboxContext();\n    const classNameStr = useClassNameStr<ListboxOptionClassNameParams>(className, {\n      isSelected: !!id && id === selectedItemId,\n    });\n\n    return (\n      <li {...props} ref={forwardedRef} id={id} className={classNameStr} role=\"option\">\n        {children}\n      </li>\n    );\n  },\n);\nListboxOption.displayName = 'ListboxOption';\n\ntype ListboxProps = HTMLAttributes<HTMLUListElement>;\n\n/**\n * The combobox popup list.\n */\nconst Listbox = forwardRef<HTMLUListElement, PropsWithRef<ListboxProps>>(({ children, ...props }, forwardedRef) => {\n  const { contextAvailable, listboxId, isExpanded } = useComboboxContext();\n  assertWithWarning(contextAvailable, contextRequiredWarning(Listbox.name));\n  const isExpandedRef = useRef(isExpanded);\n  const [hasExpanded, setHasExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      setHasExpanded(false);\n    } else if (isExpanded && isExpanded !== isExpandedRef.current) {\n      setHasExpanded(true);\n    }\n    isExpandedRef.current = isExpanded; // drag pointer to the old value\n  }, [isExpanded]);\n\n  // TODO https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live instead of title\n  return (\n    <ul\n      {...props}\n      ref={forwardedRef}\n      id={listboxId}\n      role=\"listbox\"\n      aria-live={hasExpanded ? props['aria-live'] || 'polite' : 'off'}\n    >\n      {children}\n    </ul>\n  );\n});\nListbox.displayName = 'Listbox';\n\n/*\n * Combobox - high-level component\n */\n\ntype ComboboxProps = {\n  listboxId?: ComboboxContext['listboxId'];\n  selectedItemId?: ComboboxContext['selectedItemId'];\n  isExpanded?: ComboboxContext['isExpanded'];\n  currentInputValue?: ComboboxContext['currentInputValue'];\n};\n\ntype Combobox = React.FC<PropsWithChildren<ComboboxProps>> & {\n  ComboboxInput: typeof ComboboxInput;\n  Listbox: typeof Listbox;\n  ListboxOption: typeof ListboxOption;\n  Highlight: typeof Highlight;\n};\n\n/**\n * A container that you can pass all low-level components yourself for advanced use-cases.\n * The Combobox provides the context for the combobox low-level components.\n */\nconst Combobox: Combobox = ({ currentInputValue, listboxId, selectedItemId, isExpanded = true, children }) => {\n  const id = useId();\n  return (\n    <ComboboxContext.Provider\n      value={{ currentInputValue, contextAvailable: true, listboxId: listboxId || id, selectedItemId, isExpanded }}\n    >\n      {children}\n    </ComboboxContext.Provider>\n  );\n};\n\nCombobox.ComboboxInput = ComboboxInput;\nCombobox.Listbox = Listbox;\nCombobox.ListboxOption = ListboxOption;\nCombobox.Highlight = Highlight;\n\n/*\n * DatalistInput - high-level component & its utilities\n */\n\n/**\n * Internal hook used to create a ref for a state value to allow access to the state value without triggering a re-render.\n */\nfunction useStateRef<S>(initialState: S): [S, (newState: S) => void, React.MutableRefObject<S>] {\n  const [state, setState] = useState(initialState);\n  const ref = useRef(initialState);\n  const setStateRef = (newState: S) => {\n    setState(newState);\n    ref.current = newState;\n  };\n  return [state, setStateRef, ref];\n}\n\n/**\n * Internal hook used to manipulate the value of the input field.\n */\nconst useInternalValue = (\n  value?: string,\n  setValue?: (str: string) => void | Dispatch<SetStateAction<string>>,\n): [string, (str: string) => void] => {\n  const [internalValue, setInternalValue] = useState(value || '');\n  const setValues = useCallback(\n    (newValue: string) => {\n      if (setValue) {\n        setValue(newValue);\n      } else {\n        setInternalValue(newValue);\n      }\n    },\n    [setValue],\n  );\n\n  useEffect(() => {\n    setInternalValue(value || '');\n  }, [value]);\n\n  return [internalValue, setValues];\n};\n\n/**\n * Internal hook to keep track of the selected item.\n */\nfunction useInternalSelectedItem(item?: Item): [Item | undefined, (item: Item) => void] {\n  const [selectedItem, setSelectedItem] = useState(item);\n\n  useEffect(() => {\n    setSelectedItem(item);\n  }, [item]);\n\n  return [selectedItem, setSelectedItem];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Item = any & {\n  id: string;\n  value: string; // Used for filtering. Used for displaying and highlighting if node not provided.\n  node?: ReactNode; // Used for display.\n  label?: string; // If provided, will be used as the aria-label on the list element. If not provided, value will be used instead.\n};\n\ntype Filter = (items: Item[], value?: ComboboxInputProps['value']) => Item[];\n\n/**\n * Alternative function for matching the current input value (needle) and the values of the items array.\n * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).\n */\nconst startsWithValueFilter: Filter = (items, value = '') =>\n  items.filter((item) =>\n    typeof item.value === 'string' ? item.value.substring(0, value.length).toLowerCase() === value.toLowerCase() : true,\n  );\n\n/**\n * Default function for matching the current input value (needle) and the values of the items array.\n * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).\n */\nconst includesValueFilter: Filter = (items, value = '') =>\n  items.filter((item) =>\n    typeof item.value === 'string' ? item.value.toLowerCase().includes(value.toLocaleLowerCase()) : true,\n  );\n\nfunction useFilters(\n  items: Item[],\n  value: ComboboxInputProps['value'],\n  filters: Filter[],\n): [Item[], MutableRefObject<Item[]>] {\n  const filteredRef = useRef<Item[]>(items);\n  const filtered = useMemo(\n    () => filters.reduce((currentItems, filter) => filter(currentItems, value), items),\n    [items, filters, value],\n  );\n\n  useEffect(() => {\n    filteredRef.current = filtered;\n  }, [filtered]);\n\n  return [filtered, filteredRef];\n}\n\ntype LabelOptionProps =\n  | {\n      showLabel?: false;\n      label: string;\n    }\n  | {\n      showLabel?: true;\n      label: ReactNode;\n    };\n\ntype LabelProps = HTMLAttributes<HTMLLabelElement>;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype DatalistInputProps = LabelOptionProps &\n  Omit<HTMLAttributes<HTMLDivElement>, 'onSelect'> & {\n    items: Item[];\n    selectedItem?: Item;\n    value?: ComboboxInputProps['value'];\n    setValue?: UseComboboxHelpersConfigParams['setValue'];\n    onSelect?: UseComboboxHelpersConfigParams['onSelect'];\n    isExpanded?: ComboboxContext['isExpanded'];\n    setIsExpanded?: UseComboboxHelpersConfigParams['setIsExpanded'];\n    placeholder?: ComboboxInputProps['placeholder'];\n    filters?: Filter[];\n    inputProps?: ComboboxInputProps;\n    labelProps?: LabelProps;\n    listboxProps?: ListboxProps;\n    listboxOptionProps?: ListboxOptionProps;\n    highlightProps?: HighlightProps;\n    isExpandedClassName?: string;\n    isCollapsedClassName?: string;\n    isExpandedStyle?: CSSProperties;\n    isCollapsedStyle?: CSSProperties;\n  };\n\n/**\n * DatalistInput implements all lower-level components for you and provides a simple API for controlling the combobox.\n * Note: Use the useComboboxControls hook to control the value and expanded state of the combobox.\n * DatalistInput implements the ARIA1.2#comboBox specification, including keyboard navigation with ArrowUp and ArrowDown.\n * DatalistInput does currently not implement aria-activedescendant but shifts the focus to the listbox options on ArrowUp and ArrowDown.\n * Note: tabIndex of all listbox options is set to -1 to allow the user to use tab or shift tab to jump out of the datalist without the need to tab through all options.\n */\nconst DatalistInput = forwardRef<HTMLDivElement, PropsWithRef<DatalistInputProps>>(\n  (\n    {\n      label,\n      showLabel = true,\n      items,\n      selectedItem,\n      value,\n      setValue,\n      onSelect,\n      placeholder,\n      isExpanded = DEFAULT_IS_EXPANDED,\n      setIsExpanded,\n      filters = [includesValueFilter],\n      inputProps,\n      labelProps,\n      listboxOptionProps,\n      listboxProps,\n      highlightProps,\n      isExpandedClassName = '',\n      isCollapsedClassName = '',\n      isExpandedStyle,\n      isCollapsedStyle,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const [internalIsExpanded, setInternalIsExpanded, isExpandedRef] = useStateRef(isExpanded);\n    const [internalValue, setInternalValue] = useInternalValue(value, setValue);\n    const internalTextboxId = useId();\n    const debounceValue = useDeferredValue(internalValue);\n    const [filteredItems, filteredItemsRef] = useFilters(items, debounceValue, filters);\n    const listboxRef = useRef<HTMLUListElement>(null);\n    const comboboxInputRef = useRef<HTMLInputElement>(null);\n    const [internalSelectedItem, setSelectedItem] = useInternalSelectedItem(selectedItem);\n\n    const setIsExpandedStates = useCallback(\n      (state: boolean) => (setIsExpanded ? setIsExpanded(state) : setInternalIsExpanded(state)),\n      [setIsExpanded],\n    );\n\n    const {\n      handleClickOutside,\n      handleFocusOutside,\n      closeOnEscape,\n      handleChange,\n      expandOnFocus,\n      handleSelect,\n      handleKeyDownOnInput,\n      handleKeyDownOnListboxOption,\n    } = useComboboxHelpers({\n      listboxRef,\n      comboboxInputRef,\n      isExpandedRef,\n      setValue: setInternalValue,\n      onSelect,\n      itemsRef: filteredItemsRef,\n      setIsExpanded: setIsExpandedStates,\n      setSelectedItem,\n    });\n\n    useEffect(() => {\n      setInternalIsExpanded(isExpanded);\n    }, [isExpanded]);\n\n    useEffect(() => {\n      // separate useEffect so we don't re-run it twice with each dependency change\n      window.addEventListener('click', handleClickOutside);\n      window.addEventListener('keyup', closeOnEscape);\n      return () => {\n        window.removeEventListener('click', handleClickOutside);\n        window.removeEventListener('keyup', closeOnEscape);\n      };\n    }, [handleClickOutside]);\n\n    useEffect(() => {\n      // separate useEffect so we don't re-run it twice with each dependency change\n      window.addEventListener('focusin', handleFocusOutside);\n      return () => {\n        window.removeEventListener('focusin', handleFocusOutside);\n      };\n    }, [handleFocusOutside]);\n\n    return (\n      <div {...props} ref={forwardedRef} className={`react-datalist-input__container ${props.className}`}>\n        <Combobox\n          listboxId={listboxProps?.id}\n          selectedItemId={internalSelectedItem?.id}\n          isExpanded={internalIsExpanded}\n          currentInputValue={internalValue}\n        >\n          {showLabel && (\n            <label\n              {...labelProps}\n              className={`react-datalist-input__label ${labelProps?.className}`}\n              htmlFor={inputProps?.id || internalTextboxId}\n            >\n              {label}\n            </label>\n          )}\n          <ComboboxInput\n            {...inputProps}\n            ref={comboboxInputRef}\n            id={inputProps?.id || internalTextboxId}\n            placeholder={placeholder}\n            value={internalValue}\n            onClick={handleWith(expandOnFocus, inputProps?.onClick)}\n            onFocus={handleWith(expandOnFocus, inputProps?.onFocus)}\n            onChange={handleWith(handleChange, inputProps?.onChange)}\n            onKeyDown={handleWith(handleKeyDownOnInput, inputProps?.onKeyDown)}\n            aria-label={!showLabel && typeof label === 'string' ? label : undefined}\n            className={`react-datalist-input__textbox ${inputProps?.className}`}\n          />\n          {((filteredItems.length && internalIsExpanded) || isCollapsedClassName || isCollapsedStyle) && (\n            <Listbox\n              {...listboxProps}\n              ref={listboxRef}\n              aria-hidden={internalIsExpanded}\n              className={`react-datalist-input__listbox ${\n                internalIsExpanded ? isExpandedClassName : isCollapsedClassName\n              } ${listboxProps?.className || ''}`}\n              style={{\n                ...(internalIsExpanded ? isExpandedStyle : isCollapsedStyle),\n                ...listboxProps?.style,\n              }}\n            >\n              {filteredItems.map((item) => (\n                <ListboxOption\n                  {...listboxOptionProps}\n                  aria-label={item.label || item.value}\n                  key={item.id}\n                  id={item.id}\n                  tabIndex={-1}\n                  onClick={handleWith(() => handleSelect(item), listboxOptionProps?.onClick)}\n                  onKeyDown={handleWith(handleKeyDownOnListboxOption, listboxOptionProps?.onKeyDown)}\n                  className={`react-datalist-input__listbox-option ${listboxOptionProps?.className}`}\n                >\n                  <Highlight {...highlightProps} currentInput={internalValue}>\n                    {item.node || item.value}\n                  </Highlight>\n                </ListboxOption>\n              ))}\n            </Listbox>\n          )}\n        </Combobox>\n      </div>\n    );\n  },\n);\nDatalistInput.displayName = 'DatalistInput';\n\nexport type {\n  DatalistInputProps,\n  ComboboxProps,\n  ComboboxInputProps,\n  ListboxProps,\n  ListboxOptionProps,\n  HighlightProps,\n  UseComboboxHelpersConfigParams,\n  Item,\n  Filter,\n};\n\nexport {\n  Combobox,\n  DatalistInput,\n  startsWithValueFilter,\n  includesValueFilter,\n  useFilters,\n  useComboboxContext,\n  useComboboxControls,\n  useComboboxHelpers,\n};\n\nexport default DatalistInput;\n"]},"metadata":{},"sourceType":"module"}